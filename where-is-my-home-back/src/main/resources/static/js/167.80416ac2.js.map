{"version":3,"file":"js/167.80416ac2.js","mappings":"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","sources":["webpack://where-is-my-home-front/./src/components/board/BoardView.vue","webpack://where-is-my-home-front/src/components/board/BoardView.vue","webpack://where-is-my-home-front/./src/components/board/BoardView.vue?b4e8","webpack://where-is-my-home-front/./src/components/board/BoardView.vue?1190","webpack://where-is-my-home-front/./src/apis/board.js"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('b-container',{staticClass:\"bv-example-row mt-3\"},[_c('b-row',{staticClass:\"mb-1\"},[_c('b-col',{staticClass:\"text-left\"},[_c('b-button',{attrs:{\"variant\":\"outline-primary\"},on:{\"click\":_vm.moveList}},[_vm._v(\"목록\")])],1),(_vm.loginUserId === _vm.article.userId)?_c('b-col',{staticClass:\"text-right\"},[_c('b-button',{staticClass:\"mr-2\",attrs:{\"variant\":\"outline-info\",\"size\":\"sm\"},on:{\"click\":_vm.moveModifyArticle}},[_vm._v(\"글수정\")]),_c('b-button',{attrs:{\"variant\":\"outline-danger\",\"size\":\"sm\"},on:{\"click\":_vm.deleteArticle}},[_vm._v(\"글삭제\")])],1):_vm._e()],1),_c('b-row',{staticClass:\"mb-1\"},[_c('b-col',[_c('b-card',{staticClass:\"mb-2\",attrs:{\"header-html\":`<h4>${_vm.article.id}.\n            ${_vm.article.title}</h4><div><h6>작성자: ${_vm.article.nickname} | 조회수: ${_vm.article.hit}</div><div>수정일: ${_vm.article.updatedAt}</h6></div>`,\"border-variant\":\"dark\",\"no-body\":\"\"}},[_c('b-card-body',{staticClass:\"text-left\"},[_c('div',{domProps:{\"innerHTML\":_vm._s(_vm.message)}})])],1)],1)],1),_c('div',{staticClass:\"card mb-2\"},[_c('div',{staticClass:\"card-header bg-light\"},[_c('i',{staticClass:\"fa fa-comment fa\"}),_vm._v(\" REPLY\")]),_c('div',{staticClass:\"card-body\"},[_c('b-row',[_c('b-col',{attrs:{\"cols\":\"10\"}},[_c('textarea',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.commentContent),expression:\"commentContent\"}],staticClass:\"form-control\",attrs:{\"id\":\"exampleFormControlTextarea1\",\"rows\":\"1\"},domProps:{\"value\":(_vm.commentContent)},on:{\"input\":function($event){if($event.target.composing)return;_vm.commentContent=$event.target.value}}})]),_c('b-col',{attrs:{\"cols\":\"2\"}},[_c('b-button',{attrs:{\"variant\":\"primary\"},on:{\"click\":_vm.onAddComment}},[_vm._v(\"댓글추가\")])],1)],1),_c('br'),_vm._l((_vm.comments),function(comment,index){return _c('b-row',{key:index,attrs:{\"align-v\":\"center\"}},[(comment.isDeleted === false)?_c('div',[_c('b-col',{attrs:{\"align-self\":\"start\",\"cols\":\"10\"}},[_c('b-card',[_c('b-col',{attrs:{\"cols\":\"2\"}},[_c('h5',[_vm._v(_vm._s(comment.nickname))])]),_c('b-col',{attrs:{\"cols\":\"10\"}},[_c('b-card',{attrs:{\"bg-variant\":\"Light\",\"text-variant\":\"black\"}},[_c('b-card-text',[_vm._v(_vm._s(comment.content))])],1)],1)],1),(_vm.loginUserId === comment.userId)?_c('b-col',{attrs:{\"cols\":\"2\"}},[_c('b-button',{directives:[{name:\"b-modal\",rawName:\"v-b-modal.comment-modify-modal\",modifiers:{\"comment-modify-modal\":true}}],attrs:{\"variant\":\"warning\"},on:{\"click\":function($event){return _vm.passDataToModal(comment.id)}}},[_vm._v(\"수정\")]),_c('b-button',{attrs:{\"variant\":\"danger\"},on:{\"click\":function($event){return _vm.onDeleteComment(comment.id)}}},[_vm._v(\"삭제\")])],1):_c('b-col',{attrs:{\"cols\":\"2\"}}),_c('br')],1)],1):_c('div',[_c('b-card',{staticClass:\"text-center\",attrs:{\"bg-variant\":\"secondary\",\"text-variant\":\"white\"}},[_c('b-card-text',[_vm._v(\"삭제된 메세지입니다.\")])],1),_c('br')],1)])})],2)]),_c('b-modal',{attrs:{\"id\":\"comment-modify-modal\"},scopedSlots:_vm._u([{key:\"modal-title\",fn:function(){return [_vm._v(\" 댓글 수정 입력창 \")]},proxy:true}])},[_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.modifyCommentContent),expression:\"modifyCommentContent\"}],attrs:{\"type\":\"text\"},domProps:{\"value\":(_vm.modifyCommentContent)},on:{\"input\":function($event){if($event.target.composing)return;_vm.modifyCommentContent=$event.target.value}}}),_c('b-button',{attrs:{\"variant\":\"primary\"},on:{\"click\":function($event){return _vm.onCommentModify(_vm.modifyCommentContent)}}},[_vm._v(\"수정완료\")])],1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <b-container class=\"bv-example-row mt-3\">\n    <b-row class=\"mb-1\">\n      <b-col class=\"text-left\">\n        <b-button variant=\"outline-primary\" @click=\"moveList\">목록</b-button>\n      </b-col>\n      <!-- vif 부분 현재 로그인한 userId랑 비교하도록 수정!!! -->\n      <b-col class=\"text-right\" v-if=\"loginUserId === article.userId\">\n        <b-button variant=\"outline-info\" size=\"sm\" @click=\"moveModifyArticle\" class=\"mr-2\">글수정</b-button>\n        <b-button variant=\"outline-danger\" size=\"sm\" @click=\"deleteArticle\">글삭제</b-button>\n      </b-col>\n    </b-row>\n    <b-row class=\"mb-1\">\n      <b-col>\n        <b-card\n          :header-html=\"`<h4>${article.id}.\n              ${article.title}</h4><div><h6>작성자: ${article.nickname} | 조회수: ${article.hit}</div><div>수정일: ${article.updatedAt}</h6></div>`\"\n          class=\"mb-2\"\n          border-variant=\"dark\"\n          no-body\n        >\n          <b-card-body class=\"text-left\">\n            <div v-html=\"message\"></div>\n          </b-card-body>\n        </b-card>\n      </b-col>\n    </b-row>\n    <div class=\"card mb-2\">\n      <div class=\"card-header bg-light\"><i class=\"fa fa-comment fa\"></i> REPLY</div>\n      <div class=\"card-body\">\n        <b-row>\n          <b-col cols=\"10\">\n            <textarea\n              v-model=\"commentContent\"\n              class=\"form-control\"\n              id=\"exampleFormControlTextarea1\"\n              rows=\"1\"\n            ></textarea>\n          </b-col>\n          <b-col cols=\"2\"><b-button variant=\"primary\" @click=\"onAddComment\">댓글추가</b-button></b-col>\n        </b-row>\n        <br />\n\n        <!-- vfor로 댓글 정보 출력  -->\n        <b-row align-v=\"center\" v-for=\"(comment, index) in comments\" :key=\"index\">\n          <!-- vif - 삭제된 메세지가 아닐 때 -->\n\n          <div v-if=\"comment.isDeleted === false\">\n            <b-col align-self=\"start\" cols=\"10\">\n              <b-card>\n                <b-col cols=\"2\">\n                  <h5>{{ comment.nickname }}</h5>\n                </b-col>\n                <b-col cols=\"10\">\n                  <!-- <b-form-input v-if=\"modifyFlag === false\" readonly v-model=\"comment.content\"></b-form-input> -->\n                  <b-card bg-variant=\"Light\" text-variant=\"black\">\n                    <b-card-text>{{ comment.content }}</b-card-text>\n                  </b-card>\n                </b-col>\n              </b-card>\n              <!-- 댓글의 userId와 로그인한 사용자의 userId가 같을때만 보이도록  -->\n              <b-col cols=\"2\" v-if=\"loginUserId === comment.userId\">\n                <b-button v-b-modal.comment-modify-modal @click=\"passDataToModal(comment.id)\" variant=\"warning\"\n                  >수정</b-button\n                >\n                <b-button variant=\"danger\" @click=\"onDeleteComment(comment.id)\">삭제</b-button>\n              </b-col>\n              <b-col cols=\"2\" v-else> </b-col>\n              <br />\n            </b-col>\n          </div>\n\n          <div v-else>\n            <!-- velse - 삭제된 메세지 일 때 -->\n            <b-card bg-variant=\"secondary\" text-variant=\"white\" class=\"text-center\">\n              <b-card-text>삭제된 메세지입니다.</b-card-text>\n            </b-card>\n            <br />\n          </div>\n        </b-row>\n      </div>\n    </div>\n\n    <b-modal id=\"comment-modify-modal\">\n      <template #modal-title> 댓글 수정 입력창 </template>\n      <input v-model=\"modifyCommentContent\" type=\"text\" />\n      <b-button variant=\"primary\" @click=\"onCommentModify(modifyCommentContent)\">수정완료</b-button>\n    </b-modal>\n  </b-container>\n</template>\n\n<script>\nimport { mapActions } from \"vuex\";\n// import moment from \"moment\";\nimport { getArticle, addComment, getComments, deleteComment, modifyComment } from \"@/apis/board\";\nimport { mapState } from \"vuex\";\nimport jwtDecode from \"jwt-decode\";\n\nconst userStore = \"userStore\";\n\nexport default {\n  name: \"BoardDetail\",\n  data() {\n    return {\n      articleNickname: \"\",\n      loginUserId: -1,\n      article: {},\n      commentContent: \"\",\n      comments: [],\n      modifyCommentId: -1, // 현재 댓글의 정보를 여기다가 임시로 가져오고, 모덜에서 이 데이터를 참조하여 비동기 통신 파라미터 구성\n      modifyCommentContent: \"\",\n    };\n  },\n  computed: {\n    ...mapState(userStore, [\"userInfo\"]), // 유저정보 가져오기\n    message() {\n      if (this.article.content) return this.article.content.split(\"\\n\").join(\"<br>\");\n      return \"\";\n    },\n  },\n  created() {\n    let param = this.$route.params.id; // 2. 이거 가지고 가서 서버에서 닉네임 포함된 article 가져와야 함\n    let token = sessionStorage.getItem(\"access-token\");\n    let decodeToken = jwtDecode(token);\n    this.loginUserId = parseInt(decodeToken.aud);\n\n    getArticle(\n      param,\n      ({ data }) => {\n        console.log(data);\n        this.article = data;\n        console.log(\">>>>>>>>>>>\");\n        console.log(this.article);\n      },\n      async (error) => {\n        console.log(error);\n        if (error.response.status === 400) {\n          alert(\"잘못된 접근입니다.\");\n        } else if (error.response.status === 401) {\n          console.log(\"글 상세보기: 권한이 없습니다.. 토큰 재발행으로 go\");\n          await this.tokenRegeneration(); // 토큰 재발행 코드\n          getArticle(\n            param,\n            ({ data }) => {\n              this.article = data;\n              console.log(data);\n            },\n            (error) => {\n              console.log(error);\n              if (error.response.status === 400) {\n                alert(\"잘못된 접근입니다.\");\n              } else if (error.response.status === 401) {\n                alert(\"인증이 만료되었습니다. 다시 로그인 해 주세요\");\n                this.userLogout();\n              }\n            }\n          );\n        }\n      }\n    );\n\n    this.getCommentList(); // 댓글정보 가져오기\n  },\n  methods: {\n    ...mapActions(userStore, [\"tokenRegeneration\", \"userLogout\"]),\n    moveModifyArticle() {\n      this.$router.replace({\n        name: \"boardmodify\",\n        params: { id: this.article.id },\n      });\n      //   this.$router.push({ path: `/board/modify/${this.article.articleno}` });\n    },\n    deleteArticle() {\n      if (confirm(\"정말로 삭제?\")) {\n        this.$router.replace({\n          name: \"boarddelete\",\n          params: { id: this.article.id },\n        });\n      }\n    },\n    getCommentList() {\n      // 현재 글에 등록된 모든 댓글 가져오기\n      let param = this.$route.params.id;\n      getComments(\n        param,\n        ({ data }) => {\n          this.comments = data;\n          // console.log(this.comments);\n        },\n        (error) => {\n          console.log(error);\n        }\n      );\n      // this.$router.go(); // 페이지 새로고침\n    },\n    moveList() {\n      this.$router.push({ name: \"boardlist\" });\n    },\n    onAddComment() {\n      let param = {\n        postId: this.$route.params.id,\n        content: this.commentContent,\n      };\n\n      if (this.commentContent === \"\") {\n        alert(\"댓글 내용을 입력하세요!\");\n        return;\n      }\n\n      if (!confirm(\"등록 하시겠습니까?\")) {\n        return;\n      }\n\n      addComment(\n        param,\n        (resp) => {\n          let msg = \"댓글 등록 처리시 문제가 발생했습니다.\";\n          if (resp.status === 200) {\n            msg = \"등록이 완료되었습니다.\";\n            this.commentContent = \"\";\n          }\n          alert(msg);\n          this.getCommentList();\n        },\n        async (error) => {\n          console.log(error);\n          if (error.response.status === 400) {\n            alert(\"잘못된 접근입니다.\");\n          } else if (error.response.status === 401) {\n            console.log(\"댓글 추가: 권한이 없습니다.. 토큰 재발행으로 go\");\n            await this.tokenRegeneration(); // 토큰 재발행 코드\n            addComment(\n              param,\n              (resp) => {\n                let msg = \"댓글 등록 처리시 문제가 발생했습니다.\";\n                if (resp.status === 200) {\n                  msg = \"등록이 완료되었습니다.\";\n                  this.commentContent = \"\";\n                }\n                alert(msg);\n                this.getCommentList();\n              },\n              (error) => {\n                console.log(error);\n                if (error.response.status === 400) {\n                  alert(\"잘못된 접근입니다.\");\n                } else if (error.response.status === 401) {\n                  alert(\"인증이 만료되었습니다. 다시 로그인 해 주세요\");\n                  this.userLogout();\n                }\n              }\n            );\n          }\n        }\n      );\n    },\n    onDeleteComment(commentId) {\n      let param = commentId;\n\n      if (!confirm(\"삭제 하시겠습니까?\")) {\n        return;\n      }\n      deleteComment(\n        param,\n        (resp) => {\n          let msg = \"댓글 삭제 처리시 문제가 발생했습니다.\";\n          if (resp.status === 200) {\n            msg = \"댓글 삭제가 완료되었습니다.\";\n          }\n          alert(msg);\n          this.getCommentList();\n        },\n        async (error) => {\n          console.log(error);\n          if (error.response.status === 400) {\n            alert(\"잘못된 접근입니다.\");\n          } else if (error.response.status === 401) {\n            console.log(\"댓글 삭제: 권한이 없습니다.. 토큰 재발행으로 go\");\n            await this.tokenRegeneration(); // 토큰 재발행 코드\n            deleteComment(\n              param,\n              (resp) => {\n                let msg = \"댓글 삭제 처리시 문제가 발생했습니다.\";\n                if (resp.status === 200) {\n                  msg = \"댓글 삭제가 완료되었습니다.\";\n                }\n                alert(msg);\n                this.getCommentList();\n              },\n              (error) => {\n                console.log(error);\n                if (error.response.status === 400) {\n                  alert(\"잘못된 접근입니다.\");\n                } else if (error.response.status === 401) {\n                  alert(\"인증이 만료되었습니다. 다시 로그인 해 주세요\");\n                  this.userLogout();\n                }\n              }\n            );\n          }\n        }\n      );\n    },\n    onCommentModify(commentContent) {\n      let param = {\n        id: this.modifyCommentId,\n        content: commentContent,\n      };\n      if (commentContent === \"\") {\n        alert(\"댓글 내용을 입력하세요!\");\n        return;\n      }\n\n      if (!confirm(\"수정 하시겠습니까?\")) {\n        return;\n      }\n      modifyComment(\n        param,\n        (resp) => {\n          this.modifyCommentId = -1;\n          // this.$refs[\"comment-modify-modal\"].hide();\n          this.$bvModal.hide(\"comment-modify-modal\");\n          let msg = \"댓글 수정 처리시 문제가 발생했습니다.\";\n          if (resp.status === 200) {\n            msg = \"댓글 수정이 완료되었습니다.\";\n          }\n          alert(msg);\n          this.getCommentList();\n        },\n        async (error) => {\n          console.log(error);\n          if (error.response.status === 400) {\n            alert(\"잘못된 접근입니다.\");\n          } else if (error.response.status === 401) {\n            console.log(\"댓글 수정: 권한이 없습니다.. 토큰 재발행으로 go\");\n            await this.tokenRegeneration(); // 토큰 재발행 코드\n            modifyComment(\n              param,\n              (resp) => {\n                this.modifyCommentId = -1;\n                // this.$refs[\"comment-modify-modal\"].hide();\n                this.$bvModal.hide(\"comment-modify-modal\");\n                let msg = \"댓글 수정 처리시 문제가 발생했습니다.\";\n                if (resp.status === 200) {\n                  msg = \"댓글 수정이 완료되었습니다.\";\n                }\n                alert(msg);\n                this.getCommentList();\n              },\n              (error) => {\n                console.log(error);\n                if (error.response.status === 400) {\n                  alert(\"잘못된 접근입니다.\");\n                } else if (error.response.status === 401) {\n                  alert(\"인증이 만료되었습니다. 다시 로그인 해 주세요\");\n                  this.userLogout();\n                }\n              }\n            );\n          }\n        }\n      );\n    },\n    passDataToModal(curCommentId) {\n      this.modifyCommentId = curCommentId;\n    },\n  },\n  // filters: {\n  //   dateFormat(regtime) {\n  //     return moment(new Date(regtime)).format(\"YY.MM.DD hh:mm:ss\");\n  //   },\n  // },\n};\n</script>\n\n<style></style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./BoardView.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./BoardView.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./BoardView.vue?vue&type=template&id=4dcba953&\"\nimport script from \"./BoardView.vue?vue&type=script&lang=js&\"\nexport * from \"./BoardView.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","// axios 코드 여기다 몰아놓음\n\nimport { apiInstance } from \"./index.js\";\n\nconst api = apiInstance();\n\nfunction listArticle(param, success, fail) {\n  api.get(`/board`, { params: param }).then(success).catch(fail);\n}\n\nfunction writeArticle(article, success, fail) {\n  api.defaults.headers[\"Authorization\"] = \"Bearer \" + sessionStorage.getItem(\"access-token\");\n  api.post(`/board/write`, JSON.stringify(article)).then(success).catch(fail);\n}\n\nfunction getArticle(articleno, success, fail) {\n  api.defaults.headers[\"Authorization\"] = \"Bearer \" + sessionStorage.getItem(\"access-token\");\n  api.get(`/board/${articleno}`).then(success).catch(fail);\n}\n\nfunction modifyArticle(article, success, fail) {\n  api.defaults.headers[\"Authorization\"] = \"Bearer \" + sessionStorage.getItem(\"access-token\");\n  api.put(`/board`, JSON.stringify(article)).then(success).catch(fail);\n}\n\nfunction deleteArticle(articleno, success, fail) {\n  api.defaults.headers[\"Authorization\"] = \"Bearer \" + sessionStorage.getItem(\"access-token\");\n  api.delete(`/board/${articleno}`).then(success).catch(fail);\n}\n\nfunction getArticleTotalLength(param, success, fail) {\n  api.get(`/board/length`, { params: param }).then(success).catch(fail);\n}\n\nfunction addComment(article, success, fail) {\n  api.defaults.headers[\"Authorization\"] = \"Bearer \" + sessionStorage.getItem(\"access-token\");\n  api.post(`/board/comment`, JSON.stringify(article)).then(success).catch(fail);\n}\n\nfunction getComments(articleno, success, fail) {\n  api.get(`/board/${articleno}/comment`).then(success).catch(fail);\n}\n\nfunction deleteComment(articleno, success, fail) {\n  api.defaults.headers[\"Authorization\"] = \"Bearer \" + sessionStorage.getItem(\"access-token\");\n  api.delete(`/board/comment/${articleno}`).then(success).catch(fail);\n}\n\nfunction modifyComment(article, success, fail) {\n  api.defaults.headers[\"Authorization\"] = \"Bearer \" + sessionStorage.getItem(\"access-token\");\n  api.put(`/board/comment`, JSON.stringify(article)).then(success).catch(fail);\n}\n\nexport {\n  listArticle,\n  writeArticle,\n  getArticle,\n  modifyArticle,\n  deleteArticle,\n  getArticleTotalLength,\n  addComment,\n  getComments,\n  deleteComment,\n  modifyComment,\n};"],"names":["render","_vm","this","_c","_self","staticClass","attrs","on","moveList","_v","loginUserId","article","userId","moveModifyArticle","deleteArticle","_e","id","title","nickname","hit","updatedAt","domProps","_s","message","directives","name","rawName","value","commentContent","expression","$event","target","composing","onAddComment","_l","comments","comment","index","key","isDeleted","content","modifiers","passDataToModal","onDeleteComment","scopedSlots","_u","fn","proxy","modifyCommentContent","onCommentModify","staticRenderFns","userStore","data","articleNickname","modifyCommentId","computed","created","getArticle","param","console","alert","error","methods","params","getCommentList","getComments","postId","addComment","resp","msg","deleteComment","modifyComment","component","api","apiInstance","listArticle","success","fail","get","then","catch","writeArticle","defaults","headers","sessionStorage","getItem","post","JSON","stringify","articleno","modifyArticle","put","delete","getArticleTotalLength"],"sourceRoot":""}